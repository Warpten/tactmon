name: build

on:
  push:
  workflow_dispatch:

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
            vcpkg:
              path: C:/vcpkg
              cache-path: C:/vcpkg/binary-cache
          - os: ubuntu-latest
            triplet: x64-linux
            compiler: clang
            vcpkg:
              path: /usr/local/share/vcpkg
              cache-path: /usr/local/share/vcpkg/binary-cache
    env:
      VCPKG_DISABLE_METRICS: 1
      DOWNLOAD_ROOT: ${{ github.workspace }}/wget-root
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: "Create directory '${{ env.DOWNLOAD_ROOT }}'"
        run: mkdir -p $DOWNLOAD_ROOT
        shell: bash

      - name: "Initialize vcpkg cache"
        run: |
          mkdir ${{ matrix.vcpkg.cache-path }}
          echo "VCPKG_DEFAULT_BINARY_CACHE=${{ matrix.vcpkg.cache-path }}" >> $GITHUB_ENV
        shell: bash

      - name: "Install Linux Developer Tools"
        if: matrix.triplet == 'x64-linux'
        run: |
          sudo apt-get update
          sudo apt-get install build-essential tar curl zip unzip
        shell: bash

      - name: "Select GCC"
        if: matrix.compiler == 'gcc'
        run: |
          sudo apt update
          sudo apt install gcc-12 g++-12
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100 --slave /usr/bin/g++ g++ /usr/bin/g++-12
          sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-12
          # GCC by default, don't need to override cc/c++.
        shell: bash
        
      - name: "Select Clang"
        if: matrix.compiler == 'clang'
        run: |
          sudo wget https://apt.llvm.org/llvm.sh -O $DOWNLOAD_ROOT/llvm.sh
          sudo chmod +x $DOWNLOAD_ROOT/llvm.sh
          sudo $DOWNLOAD_ROOT/llvm.sh
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-15 100
          # Done in a separate pass because the default sets up clang++ as master alternative instead of slave to clang.
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-15 100
          sudo update-alternatives --install /usr/bin/cc cc /usr/bin/clang-15 100
          sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-15 100
          sudo update-alternatives --display cc
        shell: bash

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly.
      # As used here the Developer Command Prompt created is targeting x64 and using the default Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1

      # Setup the build machine with the most recent versions of CMake and Ninja.
      # Both are cached if not already: on subsequent runs both will be quickly
      # restored from GitHub cache service.
      - uses: lukka/get-cmake@latest

      # Restore both vcpkg and its artifacts from the GitHub cache service.
      - name: Restore vcpkg and its artifacts.
        uses: actions/cache@v3
        with:
            # The first path is the location of vcpkg: it contains the vcpkg executable and data files, as long as the
            # built package archives (aka binary cache) which are located by VCPKG_DEFAULT_BINARY_CACHE env var.
            # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
            # Note that we do not cache the .git directory of the vcpkg installation; we however use it to tag the cache.
            path: |
                ${{ matrix.vcpkg.cache-path }}
            # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git commit id changes, or the list of packages changes. In this case a cache miss must happen and a new entry with a new key with be pushed to GitHub the cache service.
            # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the used vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out of it does not harm.
            # Note: given a key, the cache content is immutable. If a cache entry has been created improperly, in order the recreate the right content the key must be changed as well, and it must be brand new (i.e. not existing already).
            key: |
                ${{ hashFiles( 'vcpkg.json' ) }}-${{ hashFiles( format('{0}/.git/HEAD', matrix.vcpkg.path )) }}-${{ matrix.triplet }}

      - name: Build (Release configuration)
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multiconfiguration-vcpkg'
          configurePresetAdditionalArgs: "['-DCMAKE_TOOLCHAIN_FILE=${{ matrix.vcpkg.path }}/scripts/buildsystems/vcpkg.cmake']"
          buildPreset: 'ninja-multiconfiguration-vcpkg'
          buildPresetAdditionalArgs: "['--config Release']"

      # Extract artifacts and upload to GitHub.
      - name: Archive release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.os }}
          path: |
            ${{ github.workspace }}/builds/ninja-multiconfiguration-vcpkg/src/libtactmon/Release
            ${{ github.workspace }}/builds/ninja-multiconfiguration-vcpkg/src/tactmon/Release

      - name: Upload release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.config.artifact }}
          asset_name: release-${{ matrix.os }}.zip
          asset_content_type: application/zip
