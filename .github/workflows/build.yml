name: build

on:
  push:
  workflow_dispatch:

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
          - os: ubuntu-latest
            triplet: x64-linux
            compiler: clang
    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      # Tells vcpkg where binary packages are stored.
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
      VCPKG_DISABLE_METRICS: 1
      DOWNLOAD_ROOT: ${{ github.workspace }}/wget-root
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
        run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
        shell: bash

      - name: "Create directory '${{ env.DOWNLOAD_ROOT }}'"
        run: mkdir -p $DOWNLOAD_ROOT
        shell: bash

      - name: "Install Linux Developer Tools"
        if: matrix.triplet == 'x64-linux'
        run: |
          sudo apt-get update
          sudo apt-get install build-essential tar curl zip unzip
        shell: bash

      - name: "Select GCC"
        if: matrix.compiler == 'gcc'
        run: |
         sudo apt update
         sudo apt install gcc-12 g++-12
         sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100 --slave /usr/bin/g++ g++ /usr/bin/g++-12
         sudo update-alternatives --display cc
        shell: bash
        
      - name: "Select Clang"
        if: matrix.compiler == 'clang'
        run: |
         sudo wget https://apt.llvm.org/llvm.sh -O $DOWNLOAD_ROOT/llvm.sh
         sudo chmod +x $DOWNLOAD_ROOT/llvm.sh
         sudo $DOWNLOAD_ROOT/llvm.sh
         sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-15 100
         # Done in a separate pass because the default install sets them up separately (??)
         sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-15 100
         sudo update-alternatives --display cc
        shell: bash

      # Setup the build machine with the most recent versions of CMake and Ninja.
      # Both are cached if not already: on subsequent runs both will be quickly
      # restored from GitHub cache service.
      - uses: lukka/get-cmake@latest
      
      # Restore both vcpkg and its artifacts from the GitHub cache service.
      - name: Restore vcpkg and its artifacts.
        uses: actions/cache@v3
        with:
          # The first path is the location of vcpkg: it contains the vcpkg 
          # executable and data files, as long as the built package archives
          # (aka binary cache) which are located by VCPKG_DEFAULT_BINARY_CACHE env var.
          # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
          path: |
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
            !${{ env.VCPKG_ROOT }}/installed
          # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git commit id changes, or the list of packages changes. In this case a cache miss must happen and a new entry with a new key with be pushed to GitHub the cache service.
          # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the used vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out it does not harm.
          # Note: given a key, the cache content is immutable. If a cache entry has been created improperly, in order the recreate the right content the key must be changed as well, and it must be brand new (i.e. not existing already).
          key: |
            ${{ hashFiles( 'vcpkg.json' ) }}-${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}-${{ matrix.triplet }}

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly. 
      # As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1

      # Run CMake to generate Ninja project files, using the vcpkg's toolchain file to resolve and install the dependencies as specified in vcpkg.json.
      - name: Install dependencies and generate project files
        run: |
          cmake --preset ninja-multiconfiguration-vcpkg
          
      # Build (Release configuration only) the whole project with Ninja (which is spawn by CMake).
      - name: Build (Release configuration)
        run: |
          cmake --build --preset ninja-multiconfiguration-vcpkg --config Release
